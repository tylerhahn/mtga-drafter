const express = require("express");
const app = express();
const http = require("http");
const server = http.createServer(app);
const { Server } = require("socket.io");
const _ = require("lodash");

const {
  addUser,
  removeUser,
  getUser,
  getUsersInRoom,
  getBooster,
  getPacks,
  draftCard,
  destroyRoom,
} = require("../users");

const port = process.env.PORT || 8080;

const io = require("socket.io")(server, {
  cors: {
    origin: "*",
  },
});

io.on("connection", (socket) => {
  socket.on(
    "draftCard",
    async ({ id, card, packId, passToId, round, freshPack, playerId }) => {
      if (round < 4) {
        const passedBooster = await draftCard(
          id,
          card,
          packId,
          round,
          freshPack,
          playerId
        );
        io.to(passToId).emit("receivePack", {
          data: passedBooster,
        });
      } else {
        io.to(id).emit("drafterOver", {
          finished: true,
        });
      }
    }
  );

  socket.on("startDraft", async (res) => {
    const { roomId, activeSets } = res;
    const players = getUsersInRoom(roomId);

    const packs = await getPacks(roomId, activeSets);

    _.map(players, (player) => {
      const { id, pick, room, round } = player;
      console.log(player);
      io.to(id).emit("receivePack", {
        data: getBooster(player, pick, round, room),
      });
    });

    io.to(roomId).emit("roomData", {
      draftActive: true,
      round: 1,
      pick: 1,
      room: roomId,
      users: getUsersInRoom(roomId),
    });
  });

  socket.on("destroyRoom", (res) => {
    const roomId = res.room;
    destroyRoom(roomId);
  });

  socket.on("join", (res) => {
    const roomId = res.roomId;
    const { error, user } = addUser({
      id: socket.id,
      userObj: res.user,
      roomId,
    }); // add user with socket id and room info
    console.log("joined");
    if (error) {
      console.log(error);
      return;
    }

    console.log(user.room);

    socket.join(user.room);

    io.to(user.room).emit("roomData", {
      draftActive: false,
      room: user.room,
      users: getUsersInRoom(user.room),
    });

    io.to(user.id).emit("userData", {
      room: user.room,
      user: user,
    });
  });

  socket.on("sendMessage", (message, callback) => {
    const user = getUser(socket.id);

    io.to(user.room).emit("message", { user: user.player_name, text: message });

    callback();
  });

  socket.on("disconnect", (room) => {
    const user = removeUser(socket.id);

    if (user) {
      io.to(user.room).emit("roomData", {
        room: user.room,
        users: getUsersInRoom(user.room),
      });
    }
  });
});

////

// io.on("connection", (socket) => {
//   console.log(socket.id);

//   socket.on("create", (room) => {
//     socket.join(room);

//     //this is an ES6 Set of all client ids in the room
//     const clients = io.sockets.adapter.rooms.get(room);
//     const numClients = clients ? clients.size : 0;

//     io.to(room).emit("new event", numClients);

//     for (const clientId of clients) {
//       //this is the socket of each client in the room.
//       const clientSocket = io.sockets.sockets.get(clientId);
//     }
//   });
// });

app.get("/", function (req, res) {
  res.send("ok");
});

server.listen(port, () => {
  console.log("listening on " + port);
});
